using System.IO;
using UnityEditor;
using UnityEngine;

namespace EnumCreator.Editor
{
    public static class EnumGenerator
    {
        const string GENERATED_PATH = "Assets/GeneratedEnums";

        public static void Generate(EnumCreator.EnumDefinition def)
        {
            if (!Directory.Exists(GENERATED_PATH))
                Directory.CreateDirectory(GENERATED_PATH);

            var file = Path.Combine(GENERATED_PATH, $"{def.EnumName}.cs");

            using (var writer = new StreamWriter(file))
            {
                writer.WriteLine("// <auto-generated by EnumCreator>");
                writer.WriteLine($"namespace {def.Namespace}");
                writer.WriteLine("{");

                if (def.UseFlags)
                    writer.WriteLine($"    [System.Flags]");

                writer.WriteLine($"    public enum {def.EnumName}");
                writer.WriteLine("    {");

                int valueCounter = 1;

                // Add active values
                for (int i = 0; i < def.Values.Count; i++)
                {
                    var name = Sanitize(def.Values[i]);
                    int value = def.UseFlags ? valueCounter : i;
                    writer.WriteLine($"        {name} = {value},");
                    if (def.UseFlags) valueCounter <<= 1;
                }

                // Add soft-deleted values as Obsolete
                foreach (var removed in def.RemovedValues)
                {
                    var name = Sanitize(removed);
                    int value = def.UseFlags ? valueCounter : def.Values.Count + 1;
                    writer.WriteLine($"        [System.Obsolete(\"{name} removed by designer\")]");
                    writer.WriteLine($"        {name} = {value},");
                    if (def.UseFlags) valueCounter <<= 1;
                }

                writer.WriteLine("    }");
                writer.WriteLine("}");
            }

            AssetDatabase.Refresh();
        }

        private static string Sanitize(string raw)
        {
            if (string.IsNullOrWhiteSpace(raw)) return "Unnamed";
            return raw.Replace(" ", "_");
        }
    }
}

using System.IO;
using System.Linq;
using System.Text;
using UnityEngine;

namespace EnumCreator
{
    public static class EnumGenerator
    {
        public static void Generate(EnumDefinition def, string ns)
        {
            if (def == null || string.IsNullOrWhiteSpace(def.EnumName))
            {
                Debug.LogWarning("EnumDefinition is null or EnumName is empty, skipping generation.");
                return;
            }

            string folderPath = "Assets/GeneratedEnums";
            if (!Directory.Exists(folderPath))
                Directory.CreateDirectory(folderPath);

            string filePath = Path.Combine(folderPath, def.EnumName + ".cs");

            var sb = new StringBuilder();

            // Auto-generated header
            sb.AppendLine("// <auto-generated by EnumCreator v1.0 — created by Nick>");
            sb.AppendLine("// Do not modify directly; use EnumDefinition asset.");
            sb.AppendLine();

            // Namespace
            if (!string.IsNullOrWhiteSpace(ns))
            {
                sb.AppendLine($"namespace {ns}");
                sb.AppendLine("{");
            }

            // Enum declaration
            string flagsAttr = def.UseFlags ? "[System.Flags]\n" : "";
            sb.AppendLine(flagsAttr + $"public enum {def.EnumName}");
            sb.AppendLine("{");

            for (int i = 0; i < def.Values.Count; i++)
            {
                string valueName = def.Values[i];

                // Skip soft-deleted values
                if (def.RemovedValues.Contains(valueName))
                    continue;

                string tooltip = (i < def.MutableTooltips.Count && !string.IsNullOrWhiteSpace(def.MutableTooltips[i]))
                    ? $"[UnityEngine.Tooltip(\"{def.MutableTooltips[i]}\")] "
                    : "";

                sb.AppendLine($"    {tooltip}{valueName},");
            }

            sb.AppendLine("}");

            if (!string.IsNullOrWhiteSpace(ns))
                sb.AppendLine("}"); // close namespace

            File.WriteAllText(filePath, sb.ToString());
            Debug.Log($"Enum '{def.EnumName}' generated at '{filePath}'.");
        }
    }
}

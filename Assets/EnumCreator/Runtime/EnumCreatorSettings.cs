using UnityEngine;

namespace EnumCreator
{
    /// <summary>
    /// Settings for the Enum Creator tool
    /// </summary>
    [CreateAssetMenu(menuName = "Enum Creator/Settings", fileName = "EnumCreatorSettings")]
    public class EnumCreatorSettings : ScriptableObject
    {
        [Header("Default Values")]
        [Tooltip("The default namespace that will be used for all newly created enum definitions. This helps maintain consistent code organization across your project.")]
        [SerializeField] private string defaultNamespace = "Game.Enums";
        
        
        [Tooltip("When enabled, enum value names that already exist in generated enum files become read-only, preventing accidental changes. New values can still be added freely. This protects existing values while allowing new ones.")]
        [SerializeField] private bool preventValueNameChanges = false;
        
        [Tooltip("The folder path where generated enum .cs files will be saved. Use forward slashes and ensure the path exists or can be created.")]
        [SerializeField] private string generatedEnumsPath = "Assets/GeneratedEnums";
        
        [Tooltip("Whether newly created enums should use the [System.Flags] attribute by default. Flags enums allow multiple values to be combined using bitwise operations.")]
        [SerializeField] private bool defaultUseFlags = false;
        
        [Tooltip("Whether unflagged enums should use powers of 2 numbering (1, 2, 4, 8...) or sequential numbering (0, 1, 2, 3...). Powers of 2 ensures backward compatibility when toggling flags.")]
        [SerializeField] private bool usePowersOfTwoForUnflagged = true;
        
        [Header("Generation Options")]
        
        [Tooltip("When enabled, [UnityEngine.Tooltip] attributes will be included in the generated enum files for values that have tooltips defined. This provides IntelliSense documentation in your IDE.")]
        [SerializeField] private bool includeTooltips = true;
        
        [Tooltip("When enabled, auto-generated header comments will be added to the top of generated enum files. These headers identify the file as auto-generated and include tool/author information.")]
        [SerializeField] private bool includeAutoGeneratedHeader = true;
        
        

        // Public properties with getters
        public string DefaultNamespace => defaultNamespace;
        public bool PreventValueNameChanges => preventValueNameChanges;
        public string GeneratedEnumsPath => generatedEnumsPath;
        public bool DefaultUseFlags => defaultUseFlags;
        public bool UsePowersOfTwoForUnflagged => usePowersOfTwoForUnflagged;
        public bool IncludeTooltips => includeTooltips;
        public bool IncludeAutoGeneratedHeader => includeAutoGeneratedHeader;

        // Mutable properties for editor access
        public string MutableDefaultNamespace
        {
            get => defaultNamespace;
            set => defaultNamespace = value;
        }
        
        public bool MutablePreventValueNameChanges
        {
            get => preventValueNameChanges;
            set => preventValueNameChanges = value;
        }
        
        public string MutableGeneratedEnumsPath
        {
            get => generatedEnumsPath;
            set => generatedEnumsPath = value;
        }
        
        public bool MutableDefaultUseFlags
        {
            get => defaultUseFlags;
            set => defaultUseFlags = value;
        }
        
        public bool MutableUsePowersOfTwoForUnflagged
        {
            get => usePowersOfTwoForUnflagged;
            set => usePowersOfTwoForUnflagged = value;
        }
        
        
        public bool MutableIncludeTooltips
        {
            get => includeTooltips;
            set => includeTooltips = value;
        }
        
        public bool MutableIncludeAutoGeneratedHeader
        {
            get => includeAutoGeneratedHeader;
            set => includeAutoGeneratedHeader = value;
        }
        
    }
}
